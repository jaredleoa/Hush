import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:provider/provider.dart';
import 'dart:async';
import 'package:hush/config/supabase_config.dart';
import 'package:hush/services/auth_service.dart';
import 'package:hush/services/profile_service.dart';
import 'package:hush/services/household_service.dart';
import 'package:hush/services/household_member_service.dart';
import 'package:hush/services/app_state_service.dart';
import 'package:hush/screens/auth/login_screen.dart';
import 'package:hush/models/household_member_model.dart';
import 'package:hush/screens/household_setup_screen.dart';


void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  try {
    // Initialize Supabase
    await Supabase.initialize(
      url: SupabaseConfig.supabaseUrl,
      anonKey: SupabaseConfig.supabaseAnonKey,
      debug: true, // Set to false in production
    );
    
    runApp(const HushApp());
  } catch (error) {
    debugPrint('Error initializing app: $error');
    // Show some kind of error screen in production
  }
}

class HushApp extends StatelessWidget {
  const HushApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        Provider<AuthService>(
          create: (_) => AuthService(),
        ),
        Provider<ProfileService>(
          create: (_) => ProfileService(),
        ),
        Provider<HouseholdService>(
          create: (_) => HouseholdService(),
        ),
        Provider<HouseholdMemberService>(
          create: (_) => HouseholdMemberService(),
        ),
        ChangeNotifierProvider<AppStateService>(
          create: (_) => AppStateService(),
        ),
      ],
      child: MaterialApp(
        title: 'Hush',
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          primarySwatch: Colors.indigo,
          scaffoldBackgroundColor: Colors.grey[50],
        ),
        home: const SplashScreen(), // Start with splash to check auth status
      ),
    );
  }
}

// Splash screen to check authentication status
class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);
  
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  late AppStateService _appStateService;
  late AuthService _authService;
  
  @override
  void initState() {
    super.initState();
    _appStateService = Provider.of<AppStateService>(context, listen: false);
    _authService = Provider.of<AuthService>(context, listen: false);
    _checkAuthStatus();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(
              'assets/images/logo.png',
              width: 120,
              height: 120,
              errorBuilder: (ctx, obj, stack) => const Icon(
                Icons.home_rounded, 
                size: 80, 
                color: Colors.indigo,
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'Hush',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.indigo,
              ),
            ),
            const SizedBox(height: 24),
            const CircularProgressIndicator(),
          ],
        ),
      ),
    );
  }

  Future<void> _checkAuthStatus() async {
    try {
      // Short delay to show splash
      await Future.delayed(const Duration(seconds: 1));

      if (_authService.isAuthenticated) {
        // User is logged in, update app state and check household
        await _appStateService.refreshHouseholdData();
        final profile = _appStateService.currentProfile;

        if (mounted) {
          if (profile != null && profile.householdId != null) {
            // User has already joined/created a household
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (_) => HushHomePage()),
            );
          } else {
            // User needs to join a household
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (_) => HouseholdSetupScreen()),
            );
          }
        }
      } else {
        // User is not logged in
        if (mounted) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => LoginScreen()),
          );
        }
      }
    } catch (e) {
      debugPrint('Error in splash screen: $e');
      if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Authentication error. Please try again.'))
          );
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (_) => LoginScreen()),
        );
      }
    }
  }
}

// Household Setup Screen
class HouseholdSetupScreen extends StatefulWidget {
  const HouseholdSetupScreen({Key? key}) : super(key: key);

  @override
  _HouseholdSetupScreenState createState() => _HouseholdSetupScreenState();
}

// HousemateData model class
class HousemateData {
  final String name;
  String status;
  bool isHome;
  String? lastSeen;
  final bool isMe;
  
  HousemateData({
    required this.name,
    required this.status,
    required this.isHome,
    this.lastSeen,
    required this.isMe,
  });
}

class _HouseholdSetupScreenState extends State<HouseholdSetupScreen> {
  late final TextEditingController _joinCodeController;
  late final TextEditingController _householdNameController;
  bool _isCreating = false;
  bool _isJoining = false;
  String? _errorMessage;

  late final AuthService _authService;
  late final HouseholdService _householdService;
  late final ProfileService _profileService;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Household Setup'),
        backgroundColor: Color(0xFF6366F1),
      ),
      body: Center(
        child: Text('Implement household setup UI here'),
      ),
    );
  }

  // Removed duplicate lifecycle methods

    if (_joinCodeController.text.length != 6) {
      _showError('Please enter a 6-character code');
      return;
    }

    setState(() {
      _isJoining = true;
      _errorMessage = null;
    });

    try {
      final user = _authService.currentUser;
      if (user == null) {
        _showError('You need to be logged in');
        return;
      }

      // Join the household using the invite code
      final household = await _householdService.joinHousehold(
        inviteCode: _joinCodeController.text.toUpperCase(),
        userId: user.id,
      );

      // Save household details to SharedPreferences for quick access
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('hasHousehold', true);
      await prefs.setString('householdName', household.name);
      await prefs.setString('householdId', household.id);
      await prefs.setString('inviteCode', household.inviteCode);

      if (mounted) {
        // Navigate to home
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (_) => HushHomePage()),
        );
      }
    } catch (e) {
      _showError('Failed to join household: ${e.toString()}');
    } finally {
      if (mounted) {
        setState(() => _isJoining = false);
      }
    }
  }

  void _createHousehold() async {
    if (_householdNameController.text.isEmpty) {
      _showError('Please enter a household name');
      return;
    }

    setState(() {
      _isCreating = true;
      _errorMessage = null;
    });

    try {
      final user = _authService.currentUser;
      if (user == null) {
        _showError('You need to be logged in');
        return;
      }

      // Create the household
      final household = await _householdService.createHousehold(
        name: _householdNameController.text,
        userId: user.id,
      );

      // Save household status
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('hasHousehold', true);
      await prefs.setString('householdName', household.name);
      await prefs.setString('householdId', household.id);
      await prefs.setString('inviteCode', household.inviteCode);
      await prefs.setBool('isHouseholdCreator', true);

      if (mounted) {
        // Show the invite code to the user
        _showInviteCode(household.inviteCode);
      }
    } catch (e) {
      _showError('Failed to create household: ${e.toString()}');
    } finally {
      if (mounted) {
        setState(() => _isCreating = false);
      }
    }
  }

  void _showInviteCode(String code) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder:
          (context) => AlertDialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            title: Text('Household Created!'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text('Share this code with your housemates:'),
                SizedBox(height: 20),
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Color(0xFF6366F1).withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    code,
                    style: TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF6366F1),
                      letterSpacing: 8,
                    ),
                  ),
                ),
                SizedBox(height: 16),
                TextButton.icon(
                  onPressed: () {
                    Clipboard.setData(ClipboardData(text: code));
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Code copied to clipboard'),
                        backgroundColor: Colors.green,
                      ),
                    );
                  },
                  icon: Icon(Icons.copy),
                  label: Text('Copy Code'),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => HushHomePage()),
                  );
                },
                child: Text('Continue'),
              ),
            ],
          ),
    );
  }

  void _showError(String message) {
    setState(() {
      _errorMessage = message;
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
    );
  }
}

// Main home page of the app after login and household setup
class HushHomePage extends StatefulWidget {
  const HushHomePage({Key? key}) : super(key: key);

  @override
  _HushHomePageState createState() => _HushHomePageState();
}

class _HushHomePageState extends State<HushHomePage> {
  bool _isSleeping = false;
  bool _isLoading = false;
  String _householdName = 'Loading...';
  late SharedPreferences _prefs;
  late AppStateService _appStateService;
  
  List<HousemateData> _housemates = [
    HousemateData(name: 'You', status: 'awake', isHome: true, isMe: true),
    HousemateData(name: 'Alex', status: 'sleeping', isHome: true, isMe: false),
    HousemateData(name: 'Jordan', status: 'awake', isHome: false, lastSeen: '2h ago', isMe: false),
    HousemateData(name: 'Sam', status: 'sleeping', isHome: true, isMe: false),
  ];

  @override
  void initState() {
    super.initState();
    _appStateService = Provider.of<AppStateService>(context, listen: false);
    _loadHouseholdName();
    _setupMembersListener();
  }

  void _setupMembersListener() {
    // Listen to changes in the app state service
    _appStateService.addListener(_updateFromAppState);
  }
  
  void _updateFromAppState() {
    // Update UI when app state changes (real-time updates from Supabase)
    if (!mounted) return;
    
    final members = _appStateService.householdMembers;
    if (members.isNotEmpty) {
      setState(() {
        // This is where we would map from HouseholdMember objects to UI-friendly HousemateData
        // For now, we'll keep using our sample data
        // TODO: Implement real mapping when backend is ready
        // _housemates = members.map((member) => HousemateData(...)).toList();
      });
    }
  }
  
  @override
  void dispose() {
    // Clean up the listener
    _appStateService.removeListener(_updateFromAppState);
    super.dispose();
  }

  Future<void> _loadHouseholdName() async {
    setState(() => _isLoading = true);
    
    try {
      _prefs = await SharedPreferences.getInstance();
      
      // Try to get from AppStateService first (real-time data)
      if (_appStateService.currentProfile?.householdId != null) {
        final householdId = _appStateService.currentProfile!.householdId!;
        final householdService = Provider.of<HouseholdService>(context, listen: false);
        final household = await householdService.getHouseholdById(householdId);
        
        setState(() {
          _householdName = household.name;
          _isLoading = false;
        });
        
        // Update prefs for faster access next time
        await _prefs.setString('householdName', household.name);
      } else {
        // Fall back to SharedPreferences if needed
        final householdName = _prefs.getString('householdName') ?? "My Household";
        setState(() {
          _householdName = householdName;
          _isLoading = false;
        });
      }
    } catch (error) {
      print('Error loading household data: $error');
      // Fall back to a default name
      setState(() {
        _householdName = "My Household";
        _isLoading = false;
      });
    }
  }

  void _toggleSleep() {
    setState(() {
      _isSleeping = !_isSleeping;
    });

    // Update sleep status in Supabase via AppStateService
    try {
      _appStateService.updateSleepStatus(_isSleeping);
      
      // Also update local data model for immediate UI feedback
      final HousemateData me = _housemates.firstWhere((person) => person.isMe);
      setState(() {
        me.status = _isSleeping ? 'sleeping' : 'awake';
      });
    } catch (error) {
      print('Error updating sleep status: $error');
      // Revert local state if the update fails
      setState(() {
        _isSleeping = !_isSleeping;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to update your status. Please try again.')),
      );
    }
  }

  void _toggleHome() {
    final HousemateData me = _housemates.firstWhere((person) => person.isMe);
    final bool newHomeStatus = !me.isHome;
    
    // Update local state first for immediate feedback
    setState(() {
      me.isHome = newHomeStatus;
      me.status = me.isHome ? (me.status == 'sleeping' ? 'sleeping' : 'awake') : 'away';
      if (!me.isHome) {
        me.lastSeen = 'Just now';
      } else {
        me.lastSeen = null;
      }
    });
    
    // Update home status in Supabase via AppStateService
    try {
      _appStateService.updateHomeStatus(newHomeStatus);
    } catch (error) {
      print('Error updating home status: $error');
      // Revert local state if the update fails
      setState(() {
        me.isHome = !newHomeStatus;
        me.status = me.isHome ? (me.status == 'sleeping' ? 'sleeping' : 'awake') : 'away';
        if (!me.isHome) {
          me.lastSeen = 'Just now';
        } else {
          me.lastSeen = null;
        }
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to update your status. Please try again.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      body: Column(children: [_buildHeader(), _buildHousematesList()]),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.indigo[700],
        borderRadius: BorderRadius.only(
          bottomLeft: Radius.circular(15),
          bottomRight: Radius.circular(15),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              _isLoading
                  ? SizedBox(
                      width: 120,
                      child: LinearProgressIndicator(
                        backgroundColor: Colors.indigo[500],
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : Text(
                      _householdName,
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
              IconButton(
                icon: Icon(Icons.settings, color: Colors.white),
                onPressed: () {
                  // Show settings bottom sheet
                  showModalBottomSheet(
                    context: context,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.vertical(
                        top: Radius.circular(20),
                      ),
                    ),
                    builder: (context) => Container(
                      padding: EdgeInsets.all(20),
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          ListTile(
                            leading: Icon(Icons.exit_to_app),
                            title: Text('Leave Household'),
                            subtitle: Text('Reset and return to setup'),
                            onTap: () async {
                              final prefs = await SharedPreferences.getInstance();
                              await prefs.clear();
                              Navigator.pushAndRemoveUntil(
                                context,
                                MaterialPageRoute(
                                  builder: (_) => LoginScreen(),
                                ),
                                (route) => false,
                              );
                            },
                          ),
                          ListTile(
                            leading: Icon(Icons.vpn_key),
                            title: Text('Invite Code'),
                            subtitle: FutureBuilder<String>(
                              future: SharedPreferences.getInstance()
                                  .then(
                                    (prefs) =>
                                        prefs.getString('inviteCode') ??
                                        'N/A',
                                  ),
                              builder:
                                  (context, snapshot) => Text(
                                    snapshot.data ?? 'Loading...',
                                  ),
                            ),
                            onTap: () async {
                              final prefs =
                                  await SharedPreferences.getInstance();
                              final code =
                                  prefs.getString('inviteCode') ?? '';
                              Clipboard.setData(
                                ClipboardData(text: code),
                              );
                              ScaffoldMessenger.of(
                                context,
                              ).showSnackBar(
                                SnackBar(content: Text('Code copied!')),
                              );
                            },
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ],
          ),
          SizedBox(height: 20),
          Row(
            mainAxisAlignment: MainAxisAlignment.center, 
            children: [
              GestureDetector(
                onTap: _toggleSleep, 
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                  decoration: BoxDecoration(
                    color: _isSleeping ? Colors.deepPurple[100] : Colors.white,
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        spreadRadius: 0,
                        blurRadius: 10,
                        offset: Offset(0, 5),
                      ),
                    ],
                  ),
                  child: Row(
                    children: [
                      Icon(
                        _isSleeping ? Icons.nightlight_round : Icons.wb_sunny_outlined,
                        color: _isSleeping ? Colors.deepPurple : Colors.amber[700],
                        size: 18,
                      ),
                      SizedBox(width: 8),
                      Text(
                        _isSleeping ? 'Sleeping' : 'Awake',
                        style: TextStyle(
                          fontWeight: FontWeight.w600,
                          color: _isSleeping ? Colors.deepPurple : Colors.amber[700],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
          SizedBox(height: 20),
          Row(
            mainAxisAlignment: MainAxisAlignment.center, 
            children: [
              GestureDetector(
                onTap: _toggleHome, 
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                  decoration: BoxDecoration(
                    color: _housemates.firstWhere((person) => person.isMe).isHome
                        ? Colors.teal[100]
                        : Colors.white,
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        spreadRadius: 0,
                        blurRadius: 10,
                        offset: Offset(0, 5),
                      ),
                    ],
                  ),
                  child: Row(
                    children: [
                      Icon(
                        _housemates.firstWhere((person) => person.isMe).isHome
                            ? Icons.home
                            : Icons.directions_walk,
                        color: _housemates.firstWhere((person) => person.isMe).isHome
                            ? Colors.teal
                            : Colors.grey[700],
                        size: 18,
                      ),
                      SizedBox(width: 8),
                      Text(
                        _housemates.firstWhere((person) => person.isMe).isHome
                            ? 'At Home'
                            : 'Away',
                        style: TextStyle(
                          fontWeight: FontWeight.w600,
                          color: _housemates.firstWhere((person) => person.isMe).isHome
                              ? Colors.teal
                              : Colors.grey[700],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
          SizedBox(height: 20),

        ],
      ),
    );
  }

  Widget _buildSleepButton() {
    return GestureDetector(
      onTap: _toggleSleep,
      child: Container(
        width: 200,
        height: 200,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: _isSleeping
                ? [Color(0xFF6366F1), Color(0xFF4F46E5)]
                : [Color(0xFFFFA574), Color(0xFFFF6B9D)],
          ),
          boxShadow: [
            BoxShadow(
              color: (_isSleeping
                      ? Color(0xFF6366F1)
                      : Color(0xFFFF6B9D))
                  .withOpacity(0.4),
              blurRadius: 30,
              spreadRadius: 10,
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              _isSleeping ? Icons.nightlight_round : Icons.wb_sunny,
              size: 70,
              color: Colors.white,
            ),
            SizedBox(height: 15),
            Text(
              _isSleeping ? 'Sleeping' : 'Awake',
              style: TextStyle(
                color: Colors.white,
                fontSize: 28,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildHomeButton() {
    return GestureDetector(
      onTap: _toggleHome,
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.2),
          borderRadius: BorderRadius.circular(25),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              _housemates.firstWhere((person) => person.isMe).isHome ? Icons.home : Icons.directions_walk,
              color: Colors.white,
              size: 20,
            ),
            SizedBox(width: 8),
            Text(
              _housemates.firstWhere((person) => person.isMe).isHome ? 'At Home' : 'Away',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHousematesList() {
    return Expanded(
      child: ListView.builder(
        itemCount: _housemates.length,
        itemBuilder: (context, index) {
          final housemate = _housemates[index];
          return ListTile(
            leading: CircleAvatar(
              backgroundColor: housemate.isMe ? Colors.indigo[700] : Colors.grey[300],
              child: Text(
                housemate.name[0].toUpperCase(),
                style: TextStyle(color: Colors.white),
              ),
            ),
            title: Text(housemate.name),
            subtitle: Text(housemate.status),
            trailing: housemate.isHome
                ? Icon(Icons.home, color: Colors.teal)
                : Icon(Icons.directions_walk, color: Colors.grey[700]),
          );
        },
      ),
    );
  }

  // Removed duplicate lifecycle methods

    if (_joinCodeController.text.length != 6) {
      _showError('Please enter a 6-character code');
      return;
    }

    setState(() {
      _isJoining = true;
      _errorMessage = null;
    });

    try {
      final user = _authService.currentUser;
      if (user == null) {
        _showError('You need to be logged in');
        return;
      }

      // Join the household using the invite code
      final household = await _householdService.joinHousehold(
        inviteCode: _joinCodeController.text.toUpperCase(),
        userId: user.id,
      );

      // Save household details to SharedPreferences for quick access
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('hasHousehold', true);
      await prefs.setString('householdName', household.name);
      await prefs.setString('householdId', household.id);
      await prefs.setString('inviteCode', household.inviteCode);

      if (mounted) {
        // Navigate to home
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (_) => HushHomePage()),
        );
      }
    } catch (e) {
      _showError('Failed to join household: ${e.toString()}');
    } finally {
      if (mounted) {
        setState(() => _isJoining = false);
      }
    }
  }

  void _createHousehold() async {
    if (_householdNameController.text.isEmpty) {
      _showError('Please enter a household name');
      return;
    }

    setState(() {
      _errorMessage = null;
    });

    try {
      final user = _authService.currentUser;
      if (user == null) {
        _showError('You need to be logged in');
        return;
      }

      // Create the household
      final household = await _householdService.createHousehold(
        name: _householdNameController.text,
        userId: user.id,
      );

      // Save household status
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('hasHousehold', true);
      await prefs.setString('householdName', household.name);
      await prefs.setString('householdId', household.id);
      await prefs.setString('inviteCode', household.inviteCode);
      await prefs.setBool('isHouseholdCreator', true);

      if (mounted) {
        // Show the invite code to the user
        _showInviteCode(household.inviteCode);
      }
    } catch (e) {
      _showError('Failed to create household: ${e.toString()}');
    }
  }

  void _showInviteCode(String code) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        title: Text('Household Created!'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('Share this code with your housemates:'),
            SizedBox(height: 20),
            Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Color(0xFF6366F1).withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                code,
                style: TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF6366F1),
                  letterSpacing: 8,
                ),
              ),
            ),
            SizedBox(height: 16),
            TextButton.icon(
              onPressed: () {
                Clipboard.setData(ClipboardData(text: code));
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Code copied to clipboard'),
                    backgroundColor: Colors.green,
                  ),
                );
              },
              icon: Icon(Icons.copy),
              label: Text('Copy Code'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(builder: (_) => HushHomePage()),
              );
            },
            child: Text('Continue'),
          ),
        ],
      ),
    );
  }

  void _showError(String message) {
    setState(() {
      _errorMessage = message;
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
    );
  }
}  

// End of the file

// End of the file
